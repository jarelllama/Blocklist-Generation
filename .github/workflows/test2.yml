name: Test List Generation
#run-name:
on:
  workflow_dispatch:

jobs:
  job:
    runs-on: ubuntu-latest
    steps:
      - name: Generate sample list
        run: |
          wget https://tranco-list.eu/top-1m.csv.zip
          unzip top-1m.csv.zip
          head -n 1000 top-1m.csv \
            | cut -d ',' -f 2 \
            | sed 's/\r//' > top-1m.txt
          sort -u top-1m.txt -o input.txt
          
          wc -l input.txt
          
      - name: Authorize the IP of the runner
        run: |
          curl -s \
            --request POST \
            --url https://api.controld.com/access \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.CONTROL_D_API }}' \
            --header 'content-type: application/x-www-form-urlencoded' \
            --data device_id=${{ secrets.CONTROL_D_DEVICE_ID }} \
            --data-urlencode ips%5B%5D=$(curl -s http://ipinfo.io/ip)
            
      - name: Start DNS query logging
        run: |            
          log_uid=$(curl -s \
            --request POST \
            --url https://api.controld.com/debug \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.CONTROL_D_API }}' \
            --header 'content-type: application/x-www-form-urlencoded' \
            --data device_id=${{ secrets.CONTROL_D_DEVICE_ID }} \
            | jq -r '.body.uid')
          echo "LOG_UID=${log_uid}" >> "$GITHUB_ENV"

      # TODO: consider using second DNS
      - name: Resolve domains using Control D
        run: |
          cat input.txt | xargs -I{} -P6 bash -c '
            domain="$1"
            dig +noall @76.76.2.175 "$domain"
          ' -- {}
            
      - name: Collate domains from Control D logs
        run: |
          curl -s \
          --request GET \
          --url 'https://api.controld.com/debug?uid=${{ env.LOG_UID }}' \
          --header 'accept: application/json' \
          --header 'authorization: Bearer ${{ secrets.CONTROL_D_API }}' \
          | jq -r '.body.queries[].fqdn' \
          > control_d_ai_malware_blocklist.txt
          sort -u control_d_ai_malware_blocklist.txt -o control_d_ai_malware_blocklist.txt
          
          echo
          echo "From logs: $(wc -l < control_d_ai_malware_blocklist.txt)"
          echo
          echo "In input but not in logs:"
          comm -23 input.txt control_d_ai_malware_blocklist.txt
          
      - name: Stop DNS query logging
        run: |
          curl -s \
            --request DELETE \
            --url 'https://api.controld.com/debug?uid=${{ env.LOG_UID }}&device_id=${{ secrets.CONTROL_D_DEVICE_ID }}' \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.CONTROL_D_API }}'
          
      - name: Deauthorize the IP of the runner
        run: |
          curl -s \
            --request DELETE   \
            --url https://api.controld.com/access \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.CONTROL_D_API }}' \
            --header 'content-type: application/x-www-form-urlencoded' \
            --data device_id=${{ secrets.CONTROL_D_DEVICE_ID }} \
            --data-urlencode ips%5B%5D=$(curl -s http://ipinfo.io/ip)
          
    
