name: Test Workflow
#run-name:
on:
  workflow_dispatch:

jobs:
  job:
    runs-on: ubuntu-latest
    steps:
      #- name: Checkout
      #  uses: actions/checkout@v3
        
      - run: |
          echo google.com > input.txt
          echo 100-solarni-lampa-cz.com >> input.txt
          echo 11trikots.com >> input.txt
          echo 12-suchen.de >> input.txt
          echo 123-123.cz >> input.txt
          sort input.txt -o input.txt
          
      - run: |
          sudo sh -c 'sh -c "$(curl -sL https://api.controld.com/dl)" -s ${{ secrets.CONTROL_D_DEVICE_ID }} forced'
          
      - name: Authorize the IP of the runner
        run: |
          curl -s \
            --request POST \
            --url https://api.controld.com/access \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.CONTROL_D_API }}' \
            --header 'content-type: application/x-www-form-urlencoded' \
            --data device_id=${{ secrets.CONTROL_D_DEVICE_ID }} \
            --data-urlencode ips%5B%5D=$(curl -s http://ipinfo.io/ip)
            
      - name: Start DNS query logging
        run: |
          LOG_UID=$(curl -s \
            --request POST \
            --url https://api.controld.com/debug \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.CONTROL_D_API }}' \
            --header 'content-type: application/x-www-form-urlencoded' \
            --data device_id=${{ secrets.CONTROL_D_DEVICE_ID }} \
            | jq -r '.body.uid')
          echo "LOG_UID=${LOG_UID}" >> "$GITHUB_ENV"

      # TODO: consider using second DNS
      - name: Resolve domains using Control D
        run: |
          dig @${{ secrets.CONTROL_D_DNS1 }} google.com
        
          #cat input.txt | xargs -I{} -P2 bash -c '
          #  domain="$1"
          #  while true; do
          #    dig=$(dig +noall @${{ secrets.CONTROL_D_DNS1 }} "$domain")
           #   [[ "$dig" =~ error|timed\ out ]] || break
          #    echo "$domain timed out"
          #    sleep 1
          #  done
          #' -- {}
            
      # TODO: remove redundant entries for wildcard formats
      # TODO: sequent runs
      - name: Collate domains blocked by the AI Malware filter
        run: |
          curl -s \
          --request GET \
          --url 'https://api.controld.com/debug?uid=${{ env.LOG_UID }}' \
          --header 'accept: application/json' \
          --header 'authorization: Bearer ${{ secrets.CONTROL_D_API }}' 
          
          
          #| jq -r '.body.queries[] | select(.reason.value == "ai_malware") | .fqdn' \
          #> control_d_ai_malware_blocklist.txt
          #sort -u control_d_ai_malware_blocklist.txt -o control_d_ai_malware_blocklist.txt
          
          #echo -e "\nDomains: $(wc -l < control_d_ai_malware_blocklist.txt)"
          
          # To remove
          #cat control_d_ai_malware_blocklist.txt
          
      - name: Stop DNS query logging
        run: |
          curl -s \
            --request DELETE \
            --url 'https://api.controld.com/debug?uid=${{ env.LOG_UID }}&device_id=${{ secrets.CONTROL_D_DEVICE_ID }}' \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.CONTROL_D_API }}'
          
      - name: Deauthorize the IP of the runner
        run: |
          curl -s \
            --request DELETE   \
            --url https://api.controld.com/access \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.CONTROL_D_API }}' \
            --header 'content-type: application/x-www-form-urlencoded' \
            --data device_id=${{ secrets.CONTROL_D_DEVICE_ID }} \
            --data-urlencode ips%5B%5D=$(curl -s http://ipinfo.io/ip)
          
